services:
  backend:
    build:
      context: ./MyPennyPincher_API
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DbCon=Server=db;Database=MyPennyPincherDb;User=sa;Password=${SA_PASSWORD};Encrypt=true;TrustServerCertificate=true;
    depends_on:
      - db

  frontend:
    build:
      context: ./MyPennyPincher_Client
      dockerfile: Dockerfile
    ports:
      - "3000:5173"
    depends_on:
      - backend

  db-init:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/sql/init:/sql
    command: >
      /bin/bash -c '
      /opt/mssql-tools/bin/sqlcmd -S db -U sa -P ${SA_PASSWORD} -C -i /sql/CreateDatabase.sql;
      '

  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SA_PASSWORD}
    ports:
      - "1433:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "${SA_PASSWORD}" -C -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  flyway:
    image: flyway/flyway:latest
    depends_on:
      db-init:
        condition: service_completed_successfully
    volumes:
      - ./db/sql/migrations:/flyway/sql
    entrypoint:
      [
        "flyway",
        "-url=jdbc:sqlserver://db:1433;databaseName=MyPennyPincherDb;encrypt=true;trustServerCertificate=true",
        "-user=sa",
        "-password=${SA_PASSWORD}",
        "migrate",
      ]

volumes:
  sqlserverdata:
